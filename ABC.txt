import pandas as pd

# Define the condition to ensure that the old record exists
old_record_exists = (
    merged_df["LIMIT_AMOUNT_OLD"].notna() &
    merged_df["DAYLIGHT_OD_LIMIT_OLD"].notna() &
    merged_df["AVAILABILITY_FLAG_OLD"].notna() &
    merged_df["LINE_CURRENCY_OLD"].notna()
)

# Define the condition to capture changes
changes_detected = (
    (merged_df["LIMIT_AMOUNT_NEW"] != merged_df["LIMIT_AMOUNT_OLD"]) |
    (merged_df["DAYLIGHT_OD_LIMIT_NEW"] != merged_df["DAYLIGHT_OD_LIMIT_OLD"]) |
    (merged_df["AVAILABILITY_FLAG_NEW"] != merged_df["AVAILABILITY_FLAG_OLD"]) |
    (merged_df["LINE_CURRENCY_NEW"] != merged_df["LINE_CURRENCY_OLD"])
)

# Combine conditions
change_conditions = (
    (merged_df["RECORD_STAT_NEW"] == "0") &  # Only include records with RECORD_STAT_NEW == 0
    (merged_df["KEY_REC"].notna()) &         # Ensure KEY_REC is not null
    old_record_exists &                      # Ensure old record exists
    changes_detected                         # Detect any changes in the fields
)

# Apply the conditions to filter the DataFrame
changed_lines = merged_df[change_conditions]
